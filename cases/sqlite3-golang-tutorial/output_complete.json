{
    "id": "chatcmpl-71lFRaoyCX40v3R0t3SxGz23cZQNe",
    "object": "chat.completion",
    "created": 1680654305,
    "model": "gpt-3.5-turbo-0301",
    "usage": {
        "prompt_tokens": 69,
        "completion_tokens": 657,
        "total_tokens": 726
    },
    "choices": [
        {
            "message": {
                "role": "assistant",
                "content": "To use the `github.com/mattn/go-sqlite3` package, you need to first import it into your Go code. Here's a simple code to query and insert data.\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc main() {\n\t// Open database connection\n\tdb, err := sql.Open(\"sqlite3\", \"./example.db\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\t// Create table\n\tcreateTableSQL := `CREATE TABLE IF NOT EXISTS users (\n\t\t\"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n\t\t\"name\" TEXT,\n\t\t\"email\" TEXT)`\n\t_, err = db.Exec(createTableSQL)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Insert data\n\tinsertSQL := `INSERT INTO users(name, email) VALUES(?, ?)`\n\tres, err := db.Exec(insertSQL, \"John Doe\", \"johndoe@example.com\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Get last inserted ID\n\tid, err := res.LastInsertId()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"Last inserted ID: %d\\n\", id)\n\n\t// Query data\n\tquerySQL := `SELECT * FROM users`\n\trows, err := db.Query(querySQL)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer rows.Close()\n\n\t// Iterate over rows\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name, email string\n\t\terr := rows.Scan(&id, &name, &email)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"id: %d, name: %s, email: %s\\n\", id, name, email)\n\t}\n}\n```\n\nIn this example, we first import the necessary packages including `database/sql` and `github.com/mattn/go-sqlite3`. \n\nThen, the database connection is opened and the `CREATE TABLE` statement is executed to create a `users` table with columns `id`, `name`, and `email`. The `IF NOT EXISTS` clause makes sure that the table is not created again if it already exists.\n\nNext, we execute an `INSERT INTO` statement to insert a new user into the `users` table. We use prepared statements and placeholders (`?`) to avoid SQL injection attacks. We also use `db.Exec` instead of `db.Query` since we are not expecting any rows back from the database.\n\nThe `LastInsertId` method is used to get the ID of the last inserted row. \n\nFinally, we execute a `SELECT` statement using `db.Query` to retrieve all data from the `users` table. We use `rows.Scan` to retrieve each row's `id`, `name`, and `email` columns from the `rows` result set, and we print them out to the console.\n\nThat's it! This is a simple example of how to use `github.com/mattn/go-sqlite3` to query and insert data into a SQLite database with Go."
            },
            "finish_reason": "stop",
            "index": 0
        }
    ]
}